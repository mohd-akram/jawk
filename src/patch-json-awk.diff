--- src/JSON.awk.orig	2020-08-15 16:59:21.000000000 +0400
+++ src/JSON.awk	2020-08-15 17:06:30.000000000 +0400
@@ -1,8 +1,8 @@
 #!/usr/bin/awk -f
 #
 # Software: JSON.awk - a practical JSON parser written in awk
-# Version: 1.4
-# Copyright (c) 2013-2020, step
+# Version: 1.3.1
+# Copyright (c) 2013-2019, step
 # License: MIT or Apache 2
 # Project home: https://github.com/step-/JSON.awk
 # Credits:      https://github.com/step-/JSON.awk#credits
@@ -54,7 +54,7 @@
 	} # else usage: awk -f JSON.awk file1 [file2...]
 
 	# set file slurping mode
-	srand(); RS="\x01n/o/m/a/t/c/h" rand()
+	srand(); RS="\1" rand()
 }
 
 { # main loop: process each file in turn {{{1
@@ -62,9 +62,11 @@
 
 	++FILEINDEX # 1-based
 	tokenize($0) # while(get_token()) {print TOKEN}
-	if (0 == parse() && 0 == STREAM) {
-		# Pass the callback an array of jpaths.
-		cb_jpaths(JPATHS, NJPATHS)
+	while (0 == parse()) {
+		if (0 == STREAM)
+			cb_jpaths(JPATHS, NJPATHS)
+		else
+			print ""
 	}
 }
 
@@ -125,7 +127,7 @@
 	}
 }
 
-function parse_array(a1,   idx,ary,ret) { #{{{1
+function parse_array(a1,   idx,ary,jpath,ret,x) { #{{{1
 	idx=0
 	ary=""
 	get_token()
@@ -154,6 +156,17 @@
 	} else {
 		VALUE = CB_VALUE = parse_array_empty(a1)
 	}
+
+	jpath = append_jpath_component(a1, "\"length\"")
+	x = append_jpath_value(jpath, idx)
+	if(0 == STREAM) {
+		# save jpath+value for cb_jpaths
+		JPATHS[++NJPATHS] = x
+	} else {
+		# consume jpath+value directly
+		print x
+	}
+
 	return 0
 }
 
@@ -176,7 +189,7 @@
 	}
 }
 
-function parse_object(a1,   key,obj) { #{{{1
+function parse_object(a1,   key,obj,keys,key_) { #{{{1
 	obj=""
 	get_token()
 #	print "parse_object(" a1 ") TOKEN=" TOKEN >"/dev/stderr"
@@ -197,6 +210,9 @@
 			if (parse_value(a1, key)) {
 				return 5
 			}
+			key_ = key
+			gsub(/^"|"$/, "", key_)
+			keys=(keys ? keys "\037" : "") key_
 			obj=obj key ":" VALUE
 			get_token()
 			if (TOKEN == "}") {
@@ -215,6 +231,15 @@
 	} else {
 		VALUE = CB_VALUE = parse_object_empty(a1)
 	}
+	jpath = append_jpath_component(a1, KEYS)
+	x = append_jpath_value(jpath, keys)
+	if(0 == STREAM) {
+		# save jpath+value for cb_jpaths
+		JPATHS[++NJPATHS] = x
+	} else {
+		# consume jpath+value directly
+		print x
+	}
 	return 0
 }
 
@@ -272,13 +297,10 @@
 
 function parse(   ret) { #{{{1
 	get_token()
+	if (!TOKEN) return 1;
 	if (ret = parse_value()) {
 		return ret
 	}
-	if (get_token()) {
-		report("EOF", TOKEN)
-		return 11
-	}
 	return 0
 }
 
@@ -301,8 +323,6 @@
 # 2) Move the call to apply() from the main loop to the END statement.
 # 3) In the main loop consider adding code that deletes partial JPATHS[]
 #    elements that would result from parsing invalid JSON files.
-# Compatibility Note:
-# 1) Very old gawk versions: replace 'delete JPATHS' with 'split("", JPATHS)'.
 
 	TOKEN=""; delete TOKENS; NTOKENS=ITOKENS=0
 	delete JPATHS; NJPATHS=0
@@ -335,7 +355,7 @@
 #	KEYWORD="null|false|true"
 	SPACE="[[:space:]]+"
 #	^BOM "|" STRING "|" NUMBER "|" KEYWORD "|" SPACE "|."
-	gsub(/(^\xEF\xBB\xBF)|\"[^\"\\[:cntrl:]]*((\\[^u[:cntrl:]]|\\u[0-9a-fA-F]{4})[^\"\\[:cntrl:]]*)*\"|-?(0|[1-9][0-9]*)([.][0-9]*)?([eE][+-]?[0-9]*)?|null|false|true|[[:space:]]+|./, "\n&", a1)
+	gsub(/(^\xEF\xBB\xBF)|"[^"\\[:cntrl:]]*((\\[^u[:cntrl:]]|\\u[0-9a-fA-F]{4})[^"\\[:cntrl:]]*)*"|-?(0|[1-9][0-9]*)([.][0-9]*)?([eE][+-]?[0-9]*)?|null|false|true|[[:space:]]+|./, "\n&", a1)
 	gsub("\n" SPACE, "\n", a1)
 	# ^\n BOM?
 	sub(/^\n(\xEF\xBB\xBF\n)?/, "", a1)
