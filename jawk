#!/bin/sh

set -eu

name=`basename $0`

usage() {
	echo "usage: $name [-v var=value] [-f progfile | 'prog'] [file]" >&2
	exit 1
}

p=
prog=
while getopts :v:f: opt; do
	case $opt in
	f) prog="$prog`cat "$OPTARG"`"; p=1 ;;
	v) ;;
	?) usage
	esac
done

i=0
skip=
f=
file=
for arg do
	i=$((i+1))
	shift
	if [ "$i" -lt "$OPTIND" ]; then
		if [ "$skip" ]; then skip=; continue; fi
		if [ "$arg" != "${arg#-f}" ]; then
			if [ "$arg" = "-f" ]; then skip=1; fi
			continue
		fi
	else
		if [ ! "$p" ]; then prog=$arg; p=1
		elif [ ! "$f" ]; then file=$arg; f=1
		else usage; fi
		continue
	fi
	set -- "$@" "$arg"
done

if [ ! "$p" ]; then usage; fi
if [ ! "$f" ]; then file=-; fi

jawk='
BEGIN { JSON="\1"; TYPE="\2"; __KEYS="\3"; FS="\n"; __jawk__init() }
{ __parse_value($0); $0 = _[JSON] }

function __jawk__init(i) {
	__CHAR[0]   =   "\0"; __CHAR[1]   =   "\1"; __CHAR[2]   =   "\2"
	__CHAR[3]   =   "\3"; __CHAR[4]   =   "\4"; __CHAR[5]   =   "\5"
	__CHAR[6]   =   "\6"; __CHAR[7]   =   "\7"; __CHAR[8]   =  "\10"
	__CHAR[9]   =  "\11"; __CHAR[10]  =  "\12"; __CHAR[11]  =  "\13"
	__CHAR[12]  =  "\14"; __CHAR[13]  =  "\15"; __CHAR[14]  =  "\16"
	__CHAR[15]  =  "\17"; __CHAR[16]  =  "\20"; __CHAR[17]  =  "\21"
	__CHAR[18]  =  "\22"; __CHAR[19]  =  "\23"; __CHAR[20]  =  "\24"
	__CHAR[21]  =  "\25"; __CHAR[22]  =  "\26"; __CHAR[23]  =  "\27"
	__CHAR[24]  =  "\30"; __CHAR[25]  =  "\31"; __CHAR[26]  =  "\32"
	__CHAR[27]  =  "\33"; __CHAR[28]  =  "\34"; __CHAR[29]  =  "\35"
	__CHAR[30]  =  "\36"; __CHAR[31]  =  "\37"; __CHAR[32]  =  "\40"
	__CHAR[33]  =  "\41"; __CHAR[34]  =  "\42"; __CHAR[35]  =  "\43"
	__CHAR[36]  =  "\44"; __CHAR[37]  =  "\45"; __CHAR[38]  =  "\46"
	__CHAR[39]  =  "\47"; __CHAR[40]  =  "\50"; __CHAR[41]  =  "\51"
	__CHAR[42]  =  "\52"; __CHAR[43]  =  "\53"; __CHAR[44]  =  "\54"
	__CHAR[45]  =  "\55"; __CHAR[46]  =  "\56"; __CHAR[47]  =  "\57"
	__CHAR[48]  =  "\60"; __CHAR[49]  =  "\61"; __CHAR[50]  =  "\62"
	__CHAR[51]  =  "\63"; __CHAR[52]  =  "\64"; __CHAR[53]  =  "\65"
	__CHAR[54]  =  "\66"; __CHAR[55]  =  "\67"; __CHAR[56]  =  "\70"
	__CHAR[57]  =  "\71"; __CHAR[58]  =  "\72"; __CHAR[59]  =  "\73"
	__CHAR[60]  =  "\74"; __CHAR[61]  =  "\75"; __CHAR[62]  =  "\76"
	__CHAR[63]  =  "\77"; __CHAR[64]  = "\100"; __CHAR[65]  = "\101"
	__CHAR[66]  = "\102"; __CHAR[67]  = "\103"; __CHAR[68]  = "\104"
	__CHAR[69]  = "\105"; __CHAR[70]  = "\106"; __CHAR[71]  = "\107"
	__CHAR[72]  = "\110"; __CHAR[73]  = "\111"; __CHAR[74]  = "\112"
	__CHAR[75]  = "\113"; __CHAR[76]  = "\114"; __CHAR[77]  = "\115"
	__CHAR[78]  = "\116"; __CHAR[79]  = "\117"; __CHAR[80]  = "\120"
	__CHAR[81]  = "\121"; __CHAR[82]  = "\122"; __CHAR[83]  = "\123"
	__CHAR[84]  = "\124"; __CHAR[85]  = "\125"; __CHAR[86]  = "\126"
	__CHAR[87]  = "\127"; __CHAR[88]  = "\130"; __CHAR[89]  = "\131"
	__CHAR[90]  = "\132"; __CHAR[91]  = "\133"; __CHAR[92]  = "\134"
	__CHAR[93]  = "\135"; __CHAR[94]  = "\136"; __CHAR[95]  = "\137"
	__CHAR[96]  = "\140"; __CHAR[97]  = "\141"; __CHAR[98]  = "\142"
	__CHAR[99]  = "\143"; __CHAR[100] = "\144"; __CHAR[101] = "\145"
	__CHAR[102] = "\146"; __CHAR[103] = "\147"; __CHAR[104] = "\150"
	__CHAR[105] = "\151"; __CHAR[106] = "\152"; __CHAR[107] = "\153"
	__CHAR[108] = "\154"; __CHAR[109] = "\155"; __CHAR[110] = "\156"
	__CHAR[111] = "\157"; __CHAR[112] = "\160"; __CHAR[113] = "\161"
	__CHAR[114] = "\162"; __CHAR[115] = "\163"; __CHAR[116] = "\164"
	__CHAR[117] = "\165"; __CHAR[118] = "\166"; __CHAR[119] = "\167"
	__CHAR[120] = "\170"; __CHAR[121] = "\171"; __CHAR[122] = "\172"
	__CHAR[123] = "\173"; __CHAR[124] = "\174"; __CHAR[125] = "\175"
	__CHAR[126] = "\176"; __CHAR[127] = "\177"; __CHAR[128] = "\200"
	__CHAR[129] = "\201"; __CHAR[130] = "\202"; __CHAR[131] = "\203"
	__CHAR[132] = "\204"; __CHAR[133] = "\205"; __CHAR[134] = "\206"
	__CHAR[135] = "\207"; __CHAR[136] = "\210"; __CHAR[137] = "\211"
	__CHAR[138] = "\212"; __CHAR[139] = "\213"; __CHAR[140] = "\214"
	__CHAR[141] = "\215"; __CHAR[142] = "\216"; __CHAR[143] = "\217"
	__CHAR[144] = "\220"; __CHAR[145] = "\221"; __CHAR[146] = "\222"
	__CHAR[147] = "\223"; __CHAR[148] = "\224"; __CHAR[149] = "\225"
	__CHAR[150] = "\226"; __CHAR[151] = "\227"; __CHAR[152] = "\230"
	__CHAR[153] = "\231"; __CHAR[154] = "\232"; __CHAR[155] = "\233"
	__CHAR[156] = "\234"; __CHAR[157] = "\235"; __CHAR[158] = "\236"
	__CHAR[159] = "\237"; __CHAR[160] = "\240"; __CHAR[161] = "\241"
	__CHAR[162] = "\242"; __CHAR[163] = "\243"; __CHAR[164] = "\244"
	__CHAR[165] = "\245"; __CHAR[166] = "\246"; __CHAR[167] = "\247"
	__CHAR[168] = "\250"; __CHAR[169] = "\251"; __CHAR[170] = "\252"
	__CHAR[171] = "\253"; __CHAR[172] = "\254"; __CHAR[173] = "\255"
	__CHAR[174] = "\256"; __CHAR[175] = "\257"; __CHAR[176] = "\260"
	__CHAR[177] = "\261"; __CHAR[178] = "\262"; __CHAR[179] = "\263"
	__CHAR[180] = "\264"; __CHAR[181] = "\265"; __CHAR[182] = "\266"
	__CHAR[183] = "\267"; __CHAR[184] = "\270"; __CHAR[185] = "\271"
	__CHAR[186] = "\272"; __CHAR[187] = "\273"; __CHAR[188] = "\274"
	__CHAR[189] = "\275"; __CHAR[190] = "\276"; __CHAR[191] = "\277"
	__CHAR[192] = "\300"; __CHAR[193] = "\301"; __CHAR[194] = "\302"
	__CHAR[195] = "\303"; __CHAR[196] = "\304"; __CHAR[197] = "\305"
	__CHAR[198] = "\306"; __CHAR[199] = "\307"; __CHAR[200] = "\310"
	__CHAR[201] = "\311"; __CHAR[202] = "\312"; __CHAR[203] = "\313"
	__CHAR[204] = "\314"; __CHAR[205] = "\315"; __CHAR[206] = "\316"
	__CHAR[207] = "\317"; __CHAR[208] = "\320"; __CHAR[209] = "\321"
	__CHAR[210] = "\322"; __CHAR[211] = "\323"; __CHAR[212] = "\324"
	__CHAR[213] = "\325"; __CHAR[214] = "\326"; __CHAR[215] = "\327"
	__CHAR[216] = "\330"; __CHAR[217] = "\331"; __CHAR[218] = "\332"
	__CHAR[219] = "\333"; __CHAR[220] = "\334"; __CHAR[221] = "\335"
	__CHAR[222] = "\336"; __CHAR[223] = "\337"; __CHAR[224] = "\340"
	__CHAR[225] = "\341"; __CHAR[226] = "\342"; __CHAR[227] = "\343"
	__CHAR[228] = "\344"; __CHAR[229] = "\345"; __CHAR[230] = "\346"
	__CHAR[231] = "\347"; __CHAR[232] = "\350"; __CHAR[233] = "\351"
	__CHAR[234] = "\352"; __CHAR[235] = "\353"; __CHAR[236] = "\354"
	__CHAR[237] = "\355"; __CHAR[238] = "\356"; __CHAR[239] = "\357"
	__CHAR[240] = "\360"; __CHAR[241] = "\361"; __CHAR[242] = "\362"
	__CHAR[243] = "\363"; __CHAR[244] = "\364"; __CHAR[245] = "\365"
	__CHAR[246] = "\366"; __CHAR[247] = "\367"; __CHAR[248] = "\370"
	__CHAR[249] = "\371"; __CHAR[250] = "\372"; __CHAR[251] = "\373"
	__CHAR[252] = "\374"; __CHAR[253] = "\375"; __CHAR[254] = "\376"
	__CHAR[255] = "\377"

	__UNESCAPE["\\b"]  =  "\b"; __UNESCAPE["\\f"]  = "\f"
	__UNESCAPE["\\n"]  =  "\n"; __UNESCAPE["\\r"]  = "\r"
	__UNESCAPE["\\t"]  =  "\t"; __UNESCAPE["\\\""] = "\""
	__UNESCAPE["\\\\"] =  "\\"; __UNESCAPE["\\/"]  = "/"

	for (i = 0; i < 256; i++) __HEX[sprintf("%02X", i)] = i
}

function __utf8enc(c) {
	if (c <= 127) {
		return __CHAR[c]
	} else if (c <= 2047) {
		return __CHAR[192 + int(c/64)] __CHAR[128 + (c%64)]
	} else if (c <= 65535) {
		return __CHAR[224 + int(c/4096)] \
			__CHAR[128 + (int(c/64) % 64)] \
			__CHAR[128 + (c%64)]
	} else if (c <= 1114111) {
		return __CHAR[240 + int(c/262144)] \
			__CHAR[128 + (int(c/4096) % 64)] \
			__CHAR[128 + (int(c/64) % 64)] \
			__CHAR[128 + (c%64)]
	}
}

function __hextodec(h) {
	h = toupper(h)
	return 256 * __HEX[substr(h, 1, 2)] + __HEX[substr(h, 3)]
}

function __unescape(s, i, s2, c, u, h) {
	i = match(s, /\\([bfnrt"\\\/]|u[0-9a-fA-F]{4})/)
	if (!i) return s
	s2 = ""
	while (i) {
		c = substr(s, RSTART, RLENGTH)
		if (c in __UNESCAPE) u = __UNESCAPE[c]
		else {
			h = __hextodec(substr(c, 3))
			if (h >= 55296 && h <= 56319) {
				c = substr(s, RSTART + RLENGTH, 6)
				RLENGTH += 6
				h = 65536 + ((h - 55296) * 1024) + \
					(__hextodec(substr(c, 3)) - 56320)
			}
			u = __utf8enc(h)
		}
		s2 = s2 substr(s, 1, RSTART - 1) u
		s = substr(s, RSTART + RLENGTH)
		i = match(s, /\\([bfnrt"\\\/]|u[0-9a-fA-F]{4})/)
	}
	s2 = s2 s
	return s2
}

function keys(a, o, n, i) {
	if (o == "" && o == 0) {
		if ((__KEYS,"length") in _) {
			n = _[__KEYS,"length"]
			while (++i <= n) a[_[__KEYS,i]] = _[__KEYS,i]
		} else {
			n = _["length"]
			while (++i <= _["length"]) a[i] = i
		}
	}
	else {
		if ((o,__KEYS,"length") in _) {
			n = _[o,__KEYS,"length"]
			while (++i <= n) a[_[o,__KEYS,i]] = o SUBSEP _[o,__KEYS,i]
		} else {
			n = _[o,"length"]
			while (++i <= n) a[i] = o SUBSEP i
		}
	}
	return n
}

function __parse_array(path, i, sep, raw_value, value) {
	i = 0
	sep = ""
	raw_value = "["
	while (sep != "]") {
		getline value
		if (value == "]") {
			raw_value = raw_value value
			break
		}
		value = __parse_value(value, __getpath(path, ++i))
		getline sep
		raw_value = raw_value value sep
	}
	_[__getpath(path, "length")] = i
	return raw_value
}

function __parse_value(value, path, raw_value, start, type) {
	start = substr(value, 1, 1)
	if (start == "{") {
		_[path] = path
		type = "object"
		raw_value = __parse_object(path)
	} else if (start == "[") {
		_[path] = path
		type = "array"
		raw_value = __parse_array(path)
	} else {
		raw_value = value
		if (start == "\"") {
			value = __unescape(substr(value, 2, length(value) - 2))
			type = "string"
		}
		else if (value == "true") {
			value = 1
			type = "boolean"
		}
		else if (value == "false") {
			value = 0
			type = "boolean"
		}
		else if (value == "null") {
			value = ""
			type = "null"
		} else {
			type = "number"
		}
		if (path == "" && path == 0)
			_[0] = value
		else
			_[path] = value
	}
	_[__getpath(path, JSON)] = raw_value
	_[__getpath(path, TYPE)] = type
	return raw_value
}

function __getpath(path, key) {
	return path == "" && path == 0 ? key : path SUBSEP key
}

function __parse_object(path, sep, i, raw_value, key, colon, value, raw_key) {
	sep = ""
	i = 0
	raw_value = "{"
	while (sep != "}") {
		getline key
		if (key == "}") {
			raw_value = raw_value key
			break
		}
		getline colon
		getline value
		raw_key = key
		key = substr(key, 2, length(key) - 2)
		value = __parse_value(value, __getpath(path, key))
		getline sep
		raw_value = raw_value raw_key colon value sep
		++i
		_[__getpath(path, __KEYS SUBSEP i)] = key
	}
	_[__getpath(path, __KEYS SUBSEP "length")] = i
	return raw_value
}
'

ESCAPE='(\\[^u[:cntrl:]]|\\u[0-9a-fA-F]{4})'
CHAR='[^[:cntrl:]"\\]'
STRING="\"$CHAR*($ESCAPE$CHAR*)*\""
NUMBER='-?(0|[1-9][0-9]*)([.][0-9]*)?([eE][+-]?[0-9]*)?'
KEYWORD='null|false|true'
SPACE='[[:space:]]+'

: ${AWK=$(command -v gawk || echo awk)}
: ${EGREP=$(command -v ugrep || echo 'grep -E')}

$EGREP -o "$STRING|$NUMBER|$KEYWORD|[][{}:,]" "$file" | $AWK "$@" "$jawk$prog"
