#!/bin/sh

set -eu

name=`basename $0`

usage() {
	echo "usage: $name [-v var=value] [-f progfile | 'prog'] [file]" >&2
	exit 1
}

p=
prog=
while getopts :v:f: opt; do
	case $opt in
	f) prog="$prog`cat "$OPTARG"`"; p=1 ;;
	v) ;;
	?) usage
	esac
done

i=0
skip=
f=
file=
for arg do
	i=$((i+1))
	shift
	if [ "$i" -lt "$OPTIND" ]; then
		if [ "$skip" ]; then skip=; continue; fi
		if [ "$arg" != "${arg#-f}" ]; then
			if [ "$arg" = "-f" ]; then skip=1; fi
			continue
		fi
	else
		if [ ! "$p" ]; then prog=$arg; p=1
		elif [ ! "$f" ]; then file=$arg; f=1
		else usage; fi
		continue
	fi
	set -- "$@" "$arg"
done

if [ ! "$p" ]; then usage; fi
if [ ! "$f" ]; then file=-; fi

cbs='

function cb_parse_array_empty(jpath) {

	return "[]"
}

function cb_parse_object_empty(jpath) {

	return "{}"
}

function cb_parse_array_enter(jpath) {

	if ("" != jpath)
		;
}

function cb_parse_array_exit(jpath, status) {

}

function cb_parse_object_enter(jpath) {

	if ("" != jpath)
		;
}

function cb_parse_object_exit(jpath, status) {

}

function cb_append_jpath_component (jpath, component) {
	if (match(component, /^[0-9]+$/))
		component++;
	if (component == "") return jpath
	gsub(/^"|"$/, "", component)
	if (jpath == "") return "\"" component "\""
	gsub(/^"|"$/, "", jpath)
	return "\"" jpath SUBSEP component "\""
}

function cb_append_jpath_value (jpath, value) {

	return sprintf("%s\t%s", jpath, value)
}

function cb_jpaths (ary, size,   i) {
	for(i=1; i <= size; i++) {
		print ary[i]
	}

	print ""
}

function cb_fails (ary, size,   k) {
}

function cb_fail1 (message) {
	return 1
}
'
parser='
#!/usr/bin/awk -f
#


BEGIN { #{{{1
	if (BRIEF  == "") BRIEF=1  # when 1 parse() omits non-leaf nodes from stdout
	if (STREAM == "") STREAM=1 # when 0 parse() stores JPATHS[] for callback cb_jpaths
	if (STRICT == "") STRICT=1 # when 1 parse() enforces valid character escapes (RFC8259 7)

	NO_EMPTY_STR = 0; NO_EMPTY_ARY = NO_EMPTY_OBJ = 1

	if (BRIEF > 0) { # parse() will look at NO_EMPTY_*
		NO_EMPTY_STR = !(x=bit_on(BRIEF, 0))
		NO_EMPTY_ARY = !(x=bit_on(BRIEF, 1))
		NO_EMPTY_OBJ = !(x=bit_on(BRIEF, 2))
		if (x=bit_on(BRIEF, 3)) NO_EMPTY_STR = 1 # wins over bit 0
	}

	delete FAILS
	reset()

	if (1 == ARGC) {
		while (getline ARGV[++ARGC] < "/dev/stdin") {
			if (ARGV[ARGC] == "")
				break
		}
	} # else usage: awk -f JSON.awk file1 [file2...]

	reset() # See important application note in reset()

	++FILEINDEX # 1-based
	while (0 == parse()) {
		if (0 == STREAM)
			cb_jpaths(JPATHS, NJPATHS)
		else
			print ""
		reset()
	}
}

END { # process invalid files {{{1
	if (0 == STREAM) {
		cb_fails(FAILS, NFAILS)
	}
	exit(NFAILS > 0)
}

function bit_on(n, b) { #{{{1
	if (b == 0) return n % 2
	return int(n / 2^b) % 2
}

function append_jpath_component(jpath, component) { #{{{1
	if (0 == STREAM) {
		return cb_append_jpath_component(jpath, component)
	} else {
		return (jpath != "" ? jpath "," : "") component
	}
}

function append_jpath_value(jpath, value) { #{{{1
	if (0 == STREAM) {
		return cb_append_jpath_value(jpath, value)
	} else {
		return sprintf("[%s]\t%s", jpath, value)
	}
}

function get_token(line) { #{{{1


	if (ITOKENS == NTOKENS) {
		NTOKENS = 0
		while (!NTOKENS) {
			if (getline line == 1) tokenize(line)
			else return 0
		}
	}
	TOKEN = TOKENS[++ITOKENS] # for internal tokenize()
	return 1  # 1 if more tokens to come
}

function parse_array_empty(jpath) { #{{{1
	if (0 == STREAM) {
		return cb_parse_array_empty(jpath)
	}
	return "[]"
}

function parse_array_enter(jpath) { #{{{1
	if (0 == STREAM) {
		cb_parse_array_enter(jpath)
	}
}

function parse_array_exit(jpath, status) { #{{{1
	if (0 == STREAM) {
		cb_parse_array_exit(jpath, status)
	}
}

function parse_array(a1,   idx,ary,jpath,ret,x) { #{{{1
	idx=0
	ary=""
	get_token()
	if (TOKEN != "]") {
		while (1) {
			if (ret = parse_value(a1, idx)) {
				return ret
			}
			idx=idx+1
			ary=ary VALUE
			get_token()
			if (TOKEN == "]") {
				break
			} else if (TOKEN == ",") {
				ary = ary ","
			} else {
				report(", or ]", TOKEN ? TOKEN : "EOF")
				return 2
			}
			get_token()
		}
		CB_VALUE = sprintf("[%s]", ary)
		VALUE = 0 == BRIEF ? CB_VALUE : ""
	} else {
		VALUE = CB_VALUE = parse_array_empty(a1)
	}

	jpath = append_jpath_component(a1, "\"length\"")
	x = append_jpath_value(jpath, idx)
	if(0 == STREAM) {
		JPATHS[++NJPATHS] = x
	} else {
		print x
	}

	return 0
}

function parse_object_empty(jpath) { #{{{1
	if (0 == STREAM) {
		return cb_parse_object_empty(jpath)
	}
	return "{}"
}

function parse_object_enter(jpath) { #{{{1
	if (0 == STREAM) {
		cb_parse_object_enter(jpath)
	}
}

function parse_object_exit(jpath, status) { #{{{1
	if (0 == STREAM) {
		cb_parse_object_exit(jpath, status)
	}
}

function parse_object(a1,   key,obj,keys,key_,jpath,x) { #{{{1
	obj=""
	get_token()
	if (TOKEN != "}") {
		while (1) {
			if (TOKEN ~ /^".*"$/) {
				key=TOKEN
			} else {
				report("string", TOKEN ? TOKEN : "EOF")
				return 3
			}
			get_token()
			if (TOKEN != ":") {
				report(":", TOKEN ? TOKEN : "EOF")
				return 4
			}
			get_token()
			if (parse_value(a1, key)) {
				return 5
			}
			key_ = key
			gsub(/^"|"$/, "", key_)
			keys=(keys ? keys "\037" : "") key_
			obj=obj key ":" VALUE
			get_token()
			if (TOKEN == "}") {
				break
			} else if (TOKEN == ",") {
				obj=obj ","
			} else {
				report(", or }", TOKEN ? TOKEN : "EOF")
				return 6
			}
			get_token()
		}
		CB_VALUE = sprintf("{%s}", obj)
		VALUE = 0 == BRIEF ? CB_VALUE : ""
	} else {
		VALUE = CB_VALUE = parse_object_empty(a1)
	}
	jpath = append_jpath_component(a1, KEYS)
	x = append_jpath_value(jpath, keys)
	if(0 == STREAM) {
		JPATHS[++NJPATHS] = x
	} else {
		print x
	}
	return 0
}

function parse_value(a1, a2,   jpath,ret,x,reason) { #{{{1
	jpath = append_jpath_component(a1, a2)

	if (TOKEN == "{") {
		parse_object_enter(jpath)
		if (parse_object(jpath)) {
			parse_object_exit(jpath, 7)
			return 7
		}
		parse_object_exit(jpath, 0)
	} else if (TOKEN == "[") {
		parse_array_enter(jpath)
		if (ret = parse_array(jpath)) {
			parse_array_exit(jpath, ret)
			return ret
		}
		parse_array_exit(jpath, 0)
	} else if (TOKEN == "") { #test case 20150410 #4
		report("value", "EOF")
		return 8
	} else if ((x = is_value(TOKEN)) >0) {
		CB_VALUE = VALUE = TOKEN
	} else {
		if (-1 == x || -2 == x) {
			reason = "missing or invalid character escape"
		}
		report("value", TOKEN, reason)
		return 9
	}

	if (0 < BRIEF && ("" == jpath || "" == VALUE)) {
		return 0
	}

	if (0 < BRIEF && (NO_EMPTY_STR && VALUE=="\"\"" || NO_EMPTY_ARY && VALUE=="[]" || NO_EMPTY_OBJ && VALUE=="{}")) {
		return 0
	}

	x = append_jpath_value(jpath, VALUE)
	if(0 == STREAM) {
		JPATHS[++NJPATHS] = x
	} else {
		print x
	}
	return 0
}

function parse(   ret) { #{{{1
	if (!get_token()) return 1;
	if (ret = parse_value()) {
		return ret
	}
	return 0
}

function report(expected, got, extra,   i,from,to,context) { #{{{1
	from = ITOKENS - 10; if (from < 1) from = 1
	to = ITOKENS + 10; if (to > NTOKENS) to = NTOKENS
	for (i = from; i < ITOKENS; i++)
		context = context sprintf("%s ", TOKENS[i])
	context = context "<<" got ">> "
	for (i = ITOKENS + 1; i <= to; i++)
		context = context sprintf("%s ", TOKENS[i])
	scream("expected <" expected "> but got <" got "> (length " length(got) (extra ? ", "extra :"") ") at input token " ITOKENS "\n" context)
}

function reset() { #{{{1

	TOKEN=""; delete TOKENS; NTOKENS=ITOKENS=0
	delete JPATHS; NJPATHS=0
	CB_VALUE = VALUE = ""
}

function scream(msg) { #{{{1
	NFAILS += (FILENAME in FAILS ? 0 : 1)
	FAILS[FILENAME] = FAILS[FILENAME] (FAILS[FILENAME]!="" ? "\n" : "") msg
	if(0 == STREAM) {
		if(cb_fail1(msg)) {
			print FILENAME ": " msg >"/dev/stderr"
		}
	} else {
		print FILENAME ": " msg >"/dev/stderr"
	}
}

function tokenize(a1) { #{{{1


	gsub(/^\357\273\277|"[^"\\\000-\037]*((\\[^u\000-\037]|\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])[^"\\\000-\037]*)*"|-?(0|[1-9][0-9]*)([.][0-9]+)?([eE][+-]?[0-9]+)?|null|false|true|[ \t\n\r]+|./, "\n&", a1)
	gsub("\n" "[ \t\n\r]+", "\n", a1)
	gsub(/^\n(\357\273\277\n)?|\n$/, "", a1)
	ITOKENS=0 # get_token() helper
	return NTOKENS = split(a1, TOKENS, /\n/)
}

function is_value(a1) { #{{{1

	if(!STRICT)
		return a1 ~ /^("[^"\\\000-\037]*((\\[^u\000-\037]|\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])[^"\\\000-\037]*)*"|-?(0|[1-9][0-9]*)([.][0-9]+)?([eE][+-]?[0-9]+)?|null|false|true)$/


	if (1 != index(a1, "\"")) {
		return a1 ~ /^(-?(0|[1-9][0-9]*)([.][0-9]+)?([eE][+-]?[0-9]+)?|null|false|true)$/
	}
	if (a1 !~ /^("[^"\\\000-\037]*((\\[^u\000-\037]|\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])[^"\\\000-\037]*)*")$/) {
		return 0
	}
	a1 = substr(a1, 2, length(a1) -2)

	gsub(/\\["\\\/bfnrt]|\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]/, "", a1)
	if (a1 ~ /["\\\000-\037]/) {
		return -1
	}
	if (STRICT > 1 && index(a1, "/")) {
		return -2
	}
	return 1
}

'
jawk='
BEGIN { RS=""; FS="\n"; JSON="\1"; TYPE="\2"; __jawk__init() }
{ __jawk() }

function __jawk__init(i) {
	__CHAR[0] = "\0"
	__CHAR[1] = "\1"
	__CHAR[2] = "\2"
	__CHAR[3] = "\3"
	__CHAR[4] = "\4"
	__CHAR[5] = "\5"
	__CHAR[6] = "\6"
	__CHAR[7] = "\7"
	__CHAR[8] = "\10"
	__CHAR[9] = "\11"
	__CHAR[10] = "\12"
	__CHAR[11] = "\13"
	__CHAR[12] = "\14"
	__CHAR[13] = "\15"
	__CHAR[14] = "\16"
	__CHAR[15] = "\17"
	__CHAR[16] = "\20"
	__CHAR[17] = "\21"
	__CHAR[18] = "\22"
	__CHAR[19] = "\23"
	__CHAR[20] = "\24"
	__CHAR[21] = "\25"
	__CHAR[22] = "\26"
	__CHAR[23] = "\27"
	__CHAR[24] = "\30"
	__CHAR[25] = "\31"
	__CHAR[26] = "\32"
	__CHAR[27] = "\33"
	__CHAR[28] = "\34"
	__CHAR[29] = "\35"
	__CHAR[30] = "\36"
	__CHAR[31] = "\37"
	__CHAR[32] = "\40"
	__CHAR[33] = "\41"
	__CHAR[34] = "\42"
	__CHAR[35] = "\43"
	__CHAR[36] = "\44"
	__CHAR[37] = "\45"
	__CHAR[38] = "\46"
	__CHAR[39] = "\47"
	__CHAR[40] = "\50"
	__CHAR[41] = "\51"
	__CHAR[42] = "\52"
	__CHAR[43] = "\53"
	__CHAR[44] = "\54"
	__CHAR[45] = "\55"
	__CHAR[46] = "\56"
	__CHAR[47] = "\57"
	__CHAR[48] = "\60"
	__CHAR[49] = "\61"
	__CHAR[50] = "\62"
	__CHAR[51] = "\63"
	__CHAR[52] = "\64"
	__CHAR[53] = "\65"
	__CHAR[54] = "\66"
	__CHAR[55] = "\67"
	__CHAR[56] = "\70"
	__CHAR[57] = "\71"
	__CHAR[58] = "\72"
	__CHAR[59] = "\73"
	__CHAR[60] = "\74"
	__CHAR[61] = "\75"
	__CHAR[62] = "\76"
	__CHAR[63] = "\77"
	__CHAR[64] = "\100"
	__CHAR[65] = "\101"
	__CHAR[66] = "\102"
	__CHAR[67] = "\103"
	__CHAR[68] = "\104"
	__CHAR[69] = "\105"
	__CHAR[70] = "\106"
	__CHAR[71] = "\107"
	__CHAR[72] = "\110"
	__CHAR[73] = "\111"
	__CHAR[74] = "\112"
	__CHAR[75] = "\113"
	__CHAR[76] = "\114"
	__CHAR[77] = "\115"
	__CHAR[78] = "\116"
	__CHAR[79] = "\117"
	__CHAR[80] = "\120"
	__CHAR[81] = "\121"
	__CHAR[82] = "\122"
	__CHAR[83] = "\123"
	__CHAR[84] = "\124"
	__CHAR[85] = "\125"
	__CHAR[86] = "\126"
	__CHAR[87] = "\127"
	__CHAR[88] = "\130"
	__CHAR[89] = "\131"
	__CHAR[90] = "\132"
	__CHAR[91] = "\133"
	__CHAR[92] = "\134"
	__CHAR[93] = "\135"
	__CHAR[94] = "\136"
	__CHAR[95] = "\137"
	__CHAR[96] = "\140"
	__CHAR[97] = "\141"
	__CHAR[98] = "\142"
	__CHAR[99] = "\143"
	__CHAR[100] = "\144"
	__CHAR[101] = "\145"
	__CHAR[102] = "\146"
	__CHAR[103] = "\147"
	__CHAR[104] = "\150"
	__CHAR[105] = "\151"
	__CHAR[106] = "\152"
	__CHAR[107] = "\153"
	__CHAR[108] = "\154"
	__CHAR[109] = "\155"
	__CHAR[110] = "\156"
	__CHAR[111] = "\157"
	__CHAR[112] = "\160"
	__CHAR[113] = "\161"
	__CHAR[114] = "\162"
	__CHAR[115] = "\163"
	__CHAR[116] = "\164"
	__CHAR[117] = "\165"
	__CHAR[118] = "\166"
	__CHAR[119] = "\167"
	__CHAR[120] = "\170"
	__CHAR[121] = "\171"
	__CHAR[122] = "\172"
	__CHAR[123] = "\173"
	__CHAR[124] = "\174"
	__CHAR[125] = "\175"
	__CHAR[126] = "\176"
	__CHAR[127] = "\177"
	__CHAR[128] = "\200"
	__CHAR[129] = "\201"
	__CHAR[130] = "\202"
	__CHAR[131] = "\203"
	__CHAR[132] = "\204"
	__CHAR[133] = "\205"
	__CHAR[134] = "\206"
	__CHAR[135] = "\207"
	__CHAR[136] = "\210"
	__CHAR[137] = "\211"
	__CHAR[138] = "\212"
	__CHAR[139] = "\213"
	__CHAR[140] = "\214"
	__CHAR[141] = "\215"
	__CHAR[142] = "\216"
	__CHAR[143] = "\217"
	__CHAR[144] = "\220"
	__CHAR[145] = "\221"
	__CHAR[146] = "\222"
	__CHAR[147] = "\223"
	__CHAR[148] = "\224"
	__CHAR[149] = "\225"
	__CHAR[150] = "\226"
	__CHAR[151] = "\227"
	__CHAR[152] = "\230"
	__CHAR[153] = "\231"
	__CHAR[154] = "\232"
	__CHAR[155] = "\233"
	__CHAR[156] = "\234"
	__CHAR[157] = "\235"
	__CHAR[158] = "\236"
	__CHAR[159] = "\237"
	__CHAR[160] = "\240"
	__CHAR[161] = "\241"
	__CHAR[162] = "\242"
	__CHAR[163] = "\243"
	__CHAR[164] = "\244"
	__CHAR[165] = "\245"
	__CHAR[166] = "\246"
	__CHAR[167] = "\247"
	__CHAR[168] = "\250"
	__CHAR[169] = "\251"
	__CHAR[170] = "\252"
	__CHAR[171] = "\253"
	__CHAR[172] = "\254"
	__CHAR[173] = "\255"
	__CHAR[174] = "\256"
	__CHAR[175] = "\257"
	__CHAR[176] = "\260"
	__CHAR[177] = "\261"
	__CHAR[178] = "\262"
	__CHAR[179] = "\263"
	__CHAR[180] = "\264"
	__CHAR[181] = "\265"
	__CHAR[182] = "\266"
	__CHAR[183] = "\267"
	__CHAR[184] = "\270"
	__CHAR[185] = "\271"
	__CHAR[186] = "\272"
	__CHAR[187] = "\273"
	__CHAR[188] = "\274"
	__CHAR[189] = "\275"
	__CHAR[190] = "\276"
	__CHAR[191] = "\277"
	__CHAR[192] = "\300"
	__CHAR[193] = "\301"
	__CHAR[194] = "\302"
	__CHAR[195] = "\303"
	__CHAR[196] = "\304"
	__CHAR[197] = "\305"
	__CHAR[198] = "\306"
	__CHAR[199] = "\307"
	__CHAR[200] = "\310"
	__CHAR[201] = "\311"
	__CHAR[202] = "\312"
	__CHAR[203] = "\313"
	__CHAR[204] = "\314"
	__CHAR[205] = "\315"
	__CHAR[206] = "\316"
	__CHAR[207] = "\317"
	__CHAR[208] = "\320"
	__CHAR[209] = "\321"
	__CHAR[210] = "\322"
	__CHAR[211] = "\323"
	__CHAR[212] = "\324"
	__CHAR[213] = "\325"
	__CHAR[214] = "\326"
	__CHAR[215] = "\327"
	__CHAR[216] = "\330"
	__CHAR[217] = "\331"
	__CHAR[218] = "\332"
	__CHAR[219] = "\333"
	__CHAR[220] = "\334"
	__CHAR[221] = "\335"
	__CHAR[222] = "\336"
	__CHAR[223] = "\337"
	__CHAR[224] = "\340"
	__CHAR[225] = "\341"
	__CHAR[226] = "\342"
	__CHAR[227] = "\343"
	__CHAR[228] = "\344"
	__CHAR[229] = "\345"
	__CHAR[230] = "\346"
	__CHAR[231] = "\347"
	__CHAR[232] = "\350"
	__CHAR[233] = "\351"
	__CHAR[234] = "\352"
	__CHAR[235] = "\353"
	__CHAR[236] = "\354"
	__CHAR[237] = "\355"
	__CHAR[238] = "\356"
	__CHAR[239] = "\357"
	__CHAR[240] = "\360"
	__CHAR[241] = "\361"
	__CHAR[242] = "\362"
	__CHAR[243] = "\363"
	__CHAR[244] = "\364"
	__CHAR[245] = "\365"
	__CHAR[246] = "\366"
	__CHAR[247] = "\367"
	__CHAR[248] = "\370"
	__CHAR[249] = "\371"
	__CHAR[250] = "\372"
	__CHAR[251] = "\373"
	__CHAR[252] = "\374"
	__CHAR[253] = "\375"
	__CHAR[254] = "\376"
	__CHAR[255] = "\377"

	__UNESCAPE["\\b"] = "\b"
	__UNESCAPE["\\f"] = "\f"
	__UNESCAPE["\\n"] = "\n"
	__UNESCAPE["\\r"] = "\r"
	__UNESCAPE["\\t"] = "\t"
	__UNESCAPE["\\\""] = "\""
	__UNESCAPE["\\\\"] = "\\"
	__UNESCAPE["\\/"] = "/"

	for (i = 0; i < 256; i++)
		__HEX[sprintf("%02X", i)] = i
}

function __utf8enc(c) {
	if (c <= 127) {
		return __CHAR[c];
	} else if (c <= 2047) {
		return __CHAR[192 + int(c/64)] __CHAR[128 + (c%64)]
	} else if (c <= 65535) {
		return __CHAR[224 + int(c/4096)] \
			__CHAR[128 + (int(c/64) % 64)] \
			__CHAR[128 + (c%64)]
	} else if (c <= 1114111) {
		return __CHAR[240 + int(c/262144)] \
			__CHAR[128 + (int(c/4096) % 64)] \
			__CHAR[128 + (int(c/64) % 64)] \
			__CHAR[128 + (c%64)]
	}
}

function __hextodec(h) {
	h = toupper(h)
	return 256 * __HEX[substr(h, 1, 2)] + __HEX[substr(h, 3)]
}

function __unescape(s, i, s2, c, u, h) {
	i = match(s, /\\([bfnrt"\\\/]|u[0-9a-fA-F]{4})/)
	if (!i) return s
	s2 = ""
	while (i) {
		c = substr(s, RSTART, RLENGTH)
		if (c in __UNESCAPE) u = __UNESCAPE[c]
		else {
			h = __hextodec(substr(c, 3))
			if (h >= 55296 && h <= 56319) {
				c = substr(s, RSTART + RLENGTH, 6)
				RLENGTH += 6
				h = 65536 + ((h - 55296) * 1024) + \
					(__hextodec(substr(c, 3)) - 56320)
			}
			u = __utf8enc(h)
		}
		s2 = s2 substr(s, 1, RSTART - 1) u
		s = substr(s, RSTART + RLENGTH)
		i = match(s, /\\([bfnrt"\\\/]|u[0-9a-fA-F]{4})/)
	}
	s2 = s2 s
	return s2
}

function keys(a, o, n, ks, i) {
	if (o == "" && o == 0) {
		if ("\3" in _) {
			n = split(_["\3"], ks, "\037")
			while (++i <= n) a[ks[i]] = ks[i]
		} else {
			n = _["length"]
			while (++i <= _["length"]) a[i] = i
		}
	}
	else {
		if ((o,"\3") in _) {
			n = split(_[o,"\3"], ks, "\037")
			while (++i <= n) a[ks[i]] = o SUBSEP ks[i]
		} else {
			n = _[o,"length"]
			while (++i <= n) a[i] = o SUBSEP i
		}
	}
	return n
}

function __jawk(i, kv, key, value, raw_value, type, start) {
	for (i = 1; i <= NF; i++) {
		split($i, kv, "\t")
		key = substr(kv[1], 2, length(kv[1]) - 2)
		value = kv[2]
		raw_value = value
		start = substr(value, 1, 1)
		if (start == "\"") {
			value = __unescape(substr(value, 2, length(value) - 2))
			type = "string"
		}
		else if (start == "{") {
			value = key
			type = "object"
		}
		else if (start == "[") {
			value = key
			type = "array"
		}
		else if (value == "true") {
			value = 1
			type = "boolean"
		}
		else if (value == "false") {
			value = 0
			type = "boolean"
		}
		else if (value == "null") {
			value = ""
			type = "null"
		} else {
			type = "number"
		}
		if (kv[1]) {
			_[key] = value
			_[key,JSON] = raw_value
			_[key,TYPE] = type
		} else {
			if (type != "array" && type != "object")
				_[0] = value;
			_[JSON] = raw_value
			_[TYPE] = type
		}
	}
}
'

awk -v BRIEF=0 -v STREAM=0 -v KEYS="\3" "$cbs""$parser" "$file" | \
awk "$@" "$jawk""$prog"
